name: Release Workflow

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get latest tag
      run: |
        echo "Obtendo a última tag..."
        LAST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
        echo "Última tag encontrada: $LAST_TAG"
        echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV

    - name: Determine next version
      id: version
      run: |
        echo "Determinando o próximo incremento de versão..."
        # Obtém o label do PR para determinar o tipo de incremento
        LABEL=$(jq -r '.pull_request.labels[].name' <<< "${{ toJson(github.event.pull_request) }}" | grep -E 'major|minor|patch' || echo "patch")
        echo "Label encontrado: $LABEL"

        # Divide a última tag em partes (major, minor, patch)
        IFS='.' read -ra PARTS <<< "${LAST_TAG/v/}"
        MAJOR=${PARTS[0]}
        MINOR=${PARTS[1]}
        PATCH=${PARTS[2]}

        # Incrementa a versão com base no label
        if [ "$LABEL" == "major" ]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [ "$LABEL" == "minor" ]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi

        NEW_TAG="v$MAJOR.$MINOR.$PATCH"
        echo "Nova tag gerada: $NEW_TAG"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

    - name: Create new tag
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASES }}
      run: |
        echo "Configurando Git..."
        git config user.name "github-actions"
        git config user.email "actions@github.com"
        
        echo "Criando nova tag: $NEW_TAG"
        git tag -a $NEW_TAG -m "Release $NEW_TAG"
        
        echo "Empurrando tag para o repositório..."
        git push origin $NEW_TAG
        
        echo "Tag $NEW_TAG criada e empurrada com sucesso!"
